#+TITLE: Static Analysis: List 1
#+AUTHOR: Marcos Vinicius Moreira Santos 
#+OPTIONS: toc:nil        (no default TOC at all)

#+BEGIN_abstract
This document contains my answers for the questions at https://homepages.dcc.ufmg.br/~fernando/classes/dcc888/ementa/hw/Introduction.pdf for the Static Analysis course at UFMG.
#+END_abstract


* Question
****** The loop gets unrolled, the compiler is able to infer that the expression $CUBE(x)$ is the same throughout the execution of the loop, so the resulting value of $CUBE(x)$ is invariant throughout the loop. From this, the effect of the loop is the addition of this constant value on $sum$ $n$ times, so the resulting value after the $n'th$ iterations will be $sum += n * CUBE(x)$ where $n = 100$. For $x = 2$ ,$CUBE(x) = 8$, and then another optimization that the compiler can do is use this value to optimize the code even more. From the optimizations described we are able to remove the loop and to compute its value without ever performing the loop and just using the symbolic equivalence of the loop with the multiplication in that particular case. In particular, the printed value will be the value 800, that appears on the compiled assembly.

****** GCC takes the sequence of characters and converted that to a tree structure called the AST(Abstract Syntax Tree), a data-structure that represent the same semantic behavior of the input program, this tree is then converted to some intermediate representation, usually a simple linear sequence of low level instructions called byte-code, but it can also be represented as a graph like data-structures(like a tree or a direct acyclic graph), the intermediate representation is then converted to a bunch of other intermediate representations and in those representations, transformations on those structures may happen to produce a more efficient representation of the program while keeping the same semantic behavior. Some of the transformations described previously like loop-unrolling takes place during one of those representations, the final step is to produce the final assembly output, that by itself can also be thought of as a byte-code representation of the program. In resume, GCC takes a linear sequence of characters and perform a bunch of transformations from that initial data-structure, the pipeline can be thought as STRING -> AST -> (DAG | Byte-Code | AST | GRAPH)* -> ASSEMBLY.


* Question
****** SQL injection is a hacking technique that allows hackers to do code injection on the SQL queries. In the example query, the exploit can happen because no verification is made on the $id variable, in an arbitrary query, it could be an arbitrary SQL query that can return private and secret information. In the example case, because $id is inserted at the query with no verification, it could return all the users in the database if $id is an empty string for example.

****** During Static-Analysis a bunch of information about the program can be retrieved, like, if we are trying to access a value inside an array from an unknown value from a signed type, the compiler can warn that since the value can have a negative value, an 'out of bounds' access could happen, the same for multiplications that can result in an overflow. In the PHP example, the compiler can identify that $id could be an invalid value given the use case of the query based on language information or user defined information. For instance, since $id have type string, it can be an empty string since an empty string is a valid string. Lets say that an empty string is an invalid input for 'WHERE id=$id', what may be a programmer defined rule inside the code for that particular query or a previously defined rule on the compiler for SQL queries, knowing that all strings are valid inputs except the empty string, or a set of strings that match some set of formats,  the compiler could throw an Error to the user asking it to add a verification before the query execution to verificate if $id is an empty string and that stops the function execution up to that point avoiding the computer from ever performing the invalid query. This will be a valid program considering just the empty string case, because that particular exploit can't happen anymore, other kinds of verifications should be added to other kinds of exploits.


* Question
***** At line 2 in the given example, $w * h$ can result in an overflow that will cause $buf_size$ to be a negative value because of the $wrapping-arithmetic$ semantic of C/C++, even when $w$ and $h$ are positive and have product bigger than $BUF\underline{\hspace{.05in}}SIZE$ what can result in the bug of $buf\underline{\hspace{.05in}}size < BUF\underline{\hspace{.05in}}SIZE = true$ in situations where it should be $false$.

***** From the type level information and the use case it is possible to verify such inconsistencies. For instance, considering the possibilities of terms that a $char$ type have and the combinations that can result in a wrapping-arithmetic through Range Analysis it is possible to detect such a bug. One approach to to remove such a bug, that bug being caused by overflow, will be to avoid the overflow, this can be accomplished by taking into account that $buf\underline{\hspace{.05in}}size < BUG\underline{\hspace{.05in}}SIZE \rightarrow w * h < BUF\underline{\hspace{.05in}}SIZE \rightarrow w < \frac{BUF\underline{\hspace{.05in}}SIZE}{h}$.


* Question
***** $diff1$ stops executing just after the first mismatched character is found, so the running time depends on the inputs while $diff2$ perform always 8 assignments to the $diff$ variable before being able to return and because of that $diff2$ always take the same amount of time to run given that there is no branching on it that can cause a jump to a return statement.

***** You can use the running time of the algorithm to verify how far the current password guess is from the real one character by character, for instance, let's start with a sequence that match the password requirements like length and count of special characters for instance, we now set the current character position to zero and take the average response time from the non-isochronous algorithm for each valid password character at that position for a sufficiently big number of attempts. We then take the character with the minimum average time and place it at the current password location, we then perform the same procedure for the next password character until we reach the correct password.

***** The user can define an policy for an input, defining it as being sensible to timing channels attacks, and then the compiler verify if the execution would not branch on a value with that security policy by information propagation, this can be done statically since the branch itself does not need to be executed, just the existence of such branch is enough for the compiler to verify the security vulnerability of such program.


