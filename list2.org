#+TITLE: Static Analysis: List 2
#+AUTHOR: Marcos Vinicius Moreira Santos 
#+DATE: 12-03-2022
#+LATEX_HEADER: \usepackage{flowchart}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{arrows, shapes, positioning}
#+LATEX_HEADER: \usepackage[clean]{svg}
#+OPTIONS: toc:nil        (no default TOC at all)

#+BEGIN_abstract
This document contain my answers for the questions at https://homepages.dcc.ufmg.br/~fernando/classes/dcc888/ementa/hw/ControlFlowGraphs.pdf for the Static Analysis course at UFMG.
#+END_abstract


* Question

	\begin{tikzpicture}[thicik]

	\node[draw,
			align=flush center,
			minimum width=1cm,
			minimum height=1cm] at (0,0) (block1) {1 \\ ... \\ 13};

	\node[draw,
			below left =of block1,
			align=flush center,
			minimum width=1cm, 
			minimum height=1cm] (block2) {14 \\ ... \\ 15};

	\node[draw,
			below right =of block1,
			align=flush center,
			minimum width=1cm, 
			minimum height=1cm] (block3) {39 \\ ... \\ 39};

	\node[draw,
			below =of block2,
			align=flush center,
			minimum width=1cm, 
			minimum height=1cm] (block4) {16 \\ ... \\ 19};

	\node[draw,
			below left =of block4,
			align=flush center,
			minimum width=1cm, 
			minimum height=1cm] (block5) {20 \\ ... \\ 30};

	\node[draw,
			below right =of block3,
			align=flush center,
			minimum width=1cm, 
			minimum height=1cm] (block6) {40 \\ ... \\ 43};

	\node[draw,
			below right =of block5,
			align=flush center,
			minimum width=1cm, 
			minimum height=1cm] (block7) {31 \\ ... \\ 34};


	\node[draw,
			above left =of block5,
			align=flush center,
			minimum width=1cm, 
			minimum height=1cm] (block8) {35 \\ ... \\ 38};

	\draw[-latex] (block1) -| (block2)
								node[pos=0.25, fill=white, inner sep=0]{YES};

	\draw[-latex] (block1) -| (block3)
								node[pos=0.25, fill=white, inner sep=0]{NO};

	\draw[-latex] (block2) edge (block4);

	\draw[-latex] (block3) -| (block6);

	\draw[-latex] (block4) -| (block5)
								node[pos=0.25, fill=white, inner sep=0]{YES};

	\draw[-latex] (block4) -| (block3)
								node[pos=0.25, fill=white, inner sep=0]{NO};

	\draw[-latex] (block5) -| (block7)
								node[pos=0.25, fill=white, inner sep=0]{YES};

	\draw[-latex] (block5) -| (block8)
								node[pos=0.25, fill=white, inner sep=0]{NO};

	\draw[-latex] (block8) |- (block2);

	\draw[-latex] (block7) -| (block8);

	\end{tikzpicture}

* Question

*****  (a) If we perform value numbering on the program, we will see that the assignemnts at line 1 and line 3 refer to the same computation, assigning a integer value of 1 to both variables and because of that, the nodes representing the variables $i$ and $k$ will receive the same hash as the node of the integer of value 1. The addition at line 2 and 4 produce the same value, but since both can be output nodes, their values needs to be stored on two variables and the node of both variables will be similar to (\plus, $x$, $x$) considering that the nodes representing $k$, $i$ and $1$ receive the hash of value $x$.

***** In the case of constant propagation, the constant value will be propagated to the second line and to the third line on a first pass and the first line will be removed letting us with:
#+begin_src c++
j = 1 + 1
k = 1
l = k + 1
#+end_src

On a second pass the constant value $k$ will be propagated letting us with two additions of the form:

#+begin_src c++
j = 1 + 1
l = 1 + 1
#+end_src

This code is syntatically equivalent to the one produced by the numbering value, where the nodes of j and l will receive the hash of the node equivalent to (+, $x$, $x$), that is, both refer to assignment of the addition of the same value.

*****  (b) Differantly from the first question, the variable $i$ is now assigned to a function call, and because of that there is no constant to propagate, leaving the code the same in the case of constant propagation. Using value numbering on the other hand, the node of $i$ and $k$ will still be assigned the same hash value, and because of that the Value numbering aproach in that particular example opens the possibility for a bigger possibilities of optimizations, like substituting $k$ by $i$ on subsequent computations avoiding the cost of the assignment.

***** (c) I'm going to present the value-numbering throughout the Value-Number-Table as exemplified on the slides. Constructing the DAG from the table is trivial by just following the DAG construction algorithm presented in the slides and using the table to get a unique number for each (in, _) nodes and for each equivalent nodes, equivalent nodes are nodes  with the same operator and with the same sequence of operands. The nodes associated with a '+' have their operands sorted in ascending order since the order of the operands does not matter for the addition operation.

			Value-Number-Table:

			1 (1) \rightarrow (const, 1)

			2 (i) \rightarrow (in, _)

			3 (j) \rightarrow (in, _)

			4 (L1) \rightarrow (in, _)

			5 (a = i + 1) \rightarrow (+, 1, 2)

			6 (b = 1 + i) \rightarrow (+, 1, 2)

			7 (i = j) \rightarrow (3)

			8 (i + 1) \rightarrow (+, 3, 1)

			9 (if i + 1 goto L1) \rightarrow (if, 8, 4)

			10 (c = i + 1) \rightarrow (+, 3, 1)


***** Using the same creteriums as in the previous question:

			Value-Number-Table

			1 (x) \rightarrow (in, _)

			2 (y) \rightarrow (in, _)

			3 (z) \rightarrow (in, _)

			4 (L1) \rightarrow (in, _)

			5 (L2) \rightarrow (in, _)

			6 (a = x v y) \rightarrow (v, 1, 2)

			7 (b = x v y) \rightarrow (v, 1, 2)

			8 (t1 = !z) \rightarrow (!, 3)

			9 (if t1 foto L1) \rightarrow (if, 8, 4)

			10 (x = !z) \rightarrow (!, 3)

			11 (c = x & y) \rightarrow (&, 1, 2)

			12 (if c foto L2) \rightarrow (if, 11, 5)

			13 (d = x & y) \rightarrow (&, 1, 2)

		
* Question
***** (a)
			\includegraphics[scale=0.65]{list2-3a.png}

***** (b) The bin-packing problem can be defined as an optimization problem, in which items of different weights must be packed into a finite number of bins in a way that minimizes the number of bins used. If we have an algorithm that solves the bin-packing problem, we can interpret a bin as being a register and a variable as being an item with weight equal to the number of instructions that the variable should be keeped alive, that meaning the count of instruction between the assignment of the variable and the last instruction that the variable is used, then we can use the algorithm that solves the bin-packing problem for those items, the solution returned by the algorithm correspond to the optimal solution to the register allocation problem with minimum use of registers by the definition of the bin-packing problem.

***** (c) If we have an unbounded number of registers, we can always store the value of a particular variable on a register without ever running out of registers to use. In other situations with an enough number of registers, we may store a variable into a register if we know that the variable currently stored at that register will never be used again, that last condition can be inferred locally, what may not be the case for the global register allocation problem, since we only know the lifetime of a variable at the scope of a local block. This is the intuition behind why register allocation has an optimal solution at the local case, but not at the global case.

* Question

	\includegraphics[scale=0.65]{list2-4.png}



